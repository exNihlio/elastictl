#!/usr/bin/env python3

# We try to stay as close to standard library as possible.
import sys
import json
import os

# Do we have the things we need?

try:
    import argparse
except ModuleNotFoundError:
    print("elastictl requires argparse")
    print("Please run 'pip3 install argparse' before proceeding")
    sys.exit(1)

try:
    import httpx
except ModuleNotFoundError:
    print("elastictl requires httpx")
    print("Please run 'pip3 install httpx' before proceeding")
    sys.exit(1)

# Script specific utilities
# valp has the validate functions
from val_ip import validate_ipv4
# argument parser is generated here
from cli import parser

def main():
    # Build out args object
    args = parser()
    # Are we verbose
    verbose = args.verbose
    # Construct out baseurl from the BaseURL class.
    baseurl = BaseURL(args)
    # Get our color object 
    colors = TextColors()
    # Default action here: simply see if we hit an ES endpoint
    if args.test:
        pass
    else:
      status = EndpointValues(baseurl, verbose, colors).node_status()
      print(status)

# Return a URL object
class BaseURL():
    def __init__(self, args):
        self.protocol = args.protocol
        self.addr = args.addr
        self.port = args.port
        self.baseurl = f"{self.protocol}://{self.addr}:{self.port}"
    def __repr__(self):
        return f"{self.protocol}://{self.addr}:{self.port}"

# Initial entry in to access various endpoints
class EndpointValues():
    def __init__(self, baseurl, verbose, colors):
        self.url = baseurl.baseurl
        self.verbose = verbose
        self.colors = colors
    def cluster_settings(self):
        pass
    # Return a list of all indices
    def index_list(self):
        pass
    def node_status(self):
        try:
            es_status = httpx.get(self.url)
        except:
            return (f"{self.colors.FAIL}Error: Unable to connect. Is Elasticsearch running?{self.colors.ENDC}")

        if es_status.status_code != 200:
            return f"{self.colors.FAIL}Error: Recieved: {es_status.status_code}{self.colors.ENDC}"
        else:
            if self.verbose == True:
                # Get the full data from the endpoint
                return es_status.text
            elif self.verbose == False:
                # We just want to know if the cluster is working.
                es_json = json.loads(es_status.text)
                return f"{self.colors.OKGREEN}Elasticsearch is up! Node: {es_json['name']}{self.colors.ENDC}"

class TextColors():
    def __init__(self):
        self.HEADER = '\033[95m'
        self.OKBLUE = '\033[94m'
        self.OKGREEN = '\033[92m'
        self.WARN = '\033[93m'
        self.FAIL = '\033[91m'
        self.ENDC = '\033[0m'
        self.BOLD = '\033[1m'
        self.UNDERLINE = '\033[4m'

if __name__ == '__main__':
    main()
