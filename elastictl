#!/usr/bin/env python3

# We try to stay as close to standard library as possible.
import sys
import json

# Do we have the things we need?
try:
    import argparse
except ModuleNotFoundError:
    print("elastictl requires argparse")
    print("Please run 'pip3 install argparse' before proceeding")
    sys.exit(1)

try:
    import httpx
except ModuleNotFoundError:
    print("elastictl requires httpx")
    print("Please run 'pip3 install httpx' before proceeding")
    sys.exit(1)

# Script specific utilities
# valp has the validate functions
from val_ip import validate_ipv4
# argument parser is generated here
from cli import parser

def main():
    # Build out args object
    args = parser()
    # Are we verbose
    verbose = args.verbose
    # Construct out baseurl from the BaseURL class.
    baseurl = BaseURL(args)
    # Get our color object 
    colors = TextColors()
    # Default action here: simply see if we hit an ES endpoint

    if args.test == True:
        status = EndpointValues(baseurl, verbose, colors).es_up()
        print(status['message'])
        sys.exit(status['exit'])
    try:
        args.which == "index"
        if args.exists == True:
            exists_status = EndpointValues(baseurl, verbose, colors).index_exists(args)
            print(exists_status['message'])
            sys.exit(exists_status['exit'])
        elif args.get == True:
            print("Passing here")
            pass
        elif args.delete == True:
            delete_status = EndpointValues(baseurl, verbose, colors).index_delete(args)
            print(delete_status['message'])
            sys.exit(delete_status['exit'])
        elif args.create == True:
            create_status = EndpointValues(baseurl, verbose, colors).index_create(args)
            print(create_status['message'])
            sys.exit(create_status['exit'])
        elif args.exists != True and args.get != True and args.delete != True and args.create != True:
            print("elastictl index [--exists||--get||--delete||--create]")
            sys.exit(0)
    except:
        pass
    try:
        args.which == "node"
    except:
        pass
    try:
        args.which == "cluster"
    except:
        pass

# Return a URL object
class BaseURL():
    def __init__(self, args):
        self.protocol = args.protocol
        self.addr = args.addr
        self.port = args.port
        self.baseurl = f"{self.protocol}://{self.addr}:{self.port}"
    def __repr__(self):
        return f"{self.protocol}://{self.addr}:{self.port}"

# Initial entry in to access various endpoints
class EndpointValues():
    def __init__(self, baseurl, verbose, colors):
        self.url = baseurl.baseurl
        self.verbose = verbose
        self.colors = colors
    def cluster(self):
        pass
    # Index related options here.
    def index_get(self, args):
        pass
    # Create an index if it does not exists
    def index_create(self, args):
        es_status = self._es_error()
        if es_status['message'] != True:
            return es_status
        # format our URL
        index_url = f"{self.url}/{args.name}"
        # Check what our URL request gets
        index_status = httpx.get(index_url)
        if index_status.status_code == 404:
            index_status = httpx.put(index_url)
            if index_status.status_code != 200:
                message = f"{self.colors.WARN}Error: unable to create index{self.colors.ENDC}"
                status_message = {"message": message,
                                  "exit": 1}
                return status_message
            else:
                message = f"{self.colors.OKGREEN}Index: {args.name} created{self.colors.ENDC}"
                status_message = {"message": message,
                                  "exit": 0}
                return status_message
        else:
            message = f"{self.colors.OKGREEN}Index already exists{self.colors.ENDC}"
            status_message = {"message": message,
                              "exit": 1}
            return status_message
    # Delete an index if it does not exist
    def index_delete(self, args):
        es_status = self._es_error()
        if es_status['message'] != True:
            return es_status
        # format our URL
        index_url = f"{self.url}/{args.name}"
        # Check what our URL request gets
        index_status = httpx.get(index_url)
        if index_status.status_code == 404:
            message = f"{self.colors.WARN}Error: index: {args.name} does not exist{self.colors.ENDC}"
            status_message = {"message": message,
                              "exit": 1}
            return status_message
        elif index_status.status_code == 200:
            index_status = httpx.delete(index_url)
            if index_status.status_code != 200:
                message = f"{self.colors.WARN}Error: Unable to delete {args.name}{self.colors.ENDC}"
                status_message = {"message": message,
                                  "exit": 1}
                return status_message
            else:
                message = f"{self.colors.OKGREEN}Deleted indx: {args.name}{self.colors.ENDC}"
                status_message = {"message": message,
                                  "exit": 0}
                return status_message
        else:
            message = f"{self.colors.WARN}Unknown Error{self.colors.ENDC}"
            status_message = {"message": message,
                              "exit": 1}
            return status_message
    # Simply verify if an index is present
    def index_exists(self, args):
        es_status = self._es_error()
        if es_status['message'] != True:
            return es_status
        # format our URL
        index_url = f"{self.url}/{args.name}"
        # Check what our URL request gets
        index_status = httpx.get(index_url)
        # Does the index exist?
        if index_status.status_code == 404:
            message = f"{self.colors.WARN}Error: Index: {args.name} was not found{self.colors.ENDC}"
            status_message =  {"message": message,
                               "exit": 1}
            return status_message
        elif index_status.status_code == 200:
            message = f"{self.colors.OKGREEN}Index: {args.name} exists{self.colors.ENDC}"
            status_message = {"message": message,
                              "exit": 0}
            return status_message
        else:
            message = f"{self.colors.WARN}Error: {index_status.status_code} was received{self.colors.ENDC}"
            status_message = {"message": message,
                              "exit": 1}
            return status_message

    # Simply checks if elasticsearch is running
    def es_up(self):
        es_status = self._es_error()

        if es_status['es_status'].status_code != 200:
            message = f"{self.colors.FAIL}Error: Recieved: {es_status['es_status'].status_code}{self.colors.ENDC}"
            return { "message": message,
                     "exit": 1}
        else:
            if self.verbose == True:
                # Get the full data from the endpoint
                message = es_status['es_status'].text
                return { "message": message,
                         "exit": 0}
            elif self.verbose == False:
                # We just want to know if the cluster is working.
                es_json = json.loads(es_status['es_status'].text)
                message = f"{self.colors.OKGREEN}Elasticsearch is up! Node: {es_json['name']}{self.colors.ENDC}"
                return {"message": message,
                        "exit": 1 }

    # Simple check function for ES validity
    def _es_error(self):
        try:
            es_status = httpx.get(self.url)
            return { "message": True,
                     "es_status": es_status,
                     "exit": 0}
        except:
            message = (f"{self.colors.FAIL}Error: Unable to connect. Is Elasticsearch running?{self.colors.ENDC}")
            return { "message": message,
                     "es_status": "",
                     "exit": 1}


class TextColors():
    def __init__(self):
        self.HEADER = '\033[95m'
        self.OKBLUE = '\033[94m'
        self.OKGREEN = '\033[92m'
        self.WARN = '\033[93m'
        self.FAIL = '\033[91m'
        self.ENDC = '\033[0m'
        self.BOLD = '\033[1m'
        self.UNDERLINE = '\033[4m'

if __name__ == '__main__':
    main()
